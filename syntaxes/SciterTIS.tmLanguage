<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>scopeName</key>
    <string>source.sciter.tis</string>
    <key>name</key>
    <string>TIScript</string>
    <key>uuid</key>
    <string>12d8e808-2b62-4218-ad1d-730903a5bed5</string>
    <key>fileTypes</key>
    <array>
      <string>tis</string>
    </array>
    <key>patterns</key>
    <array>
      <dict>
        <key>include</key>
        <string>#expression</string>
      </dict>
    </array>
    <key>repository</key>
    <dict>
      <key>expression</key>
      <dict>
        <key>name</key>
        <string>meta.expression.tis</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#stringize-selector</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#statements</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#block</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#paren-expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#var-decl</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#other-keywords</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#known-types</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#known-methods</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#known-functions</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#known-properties</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#ops</string>
          </dict>
        </array>
      </dict>
      <key>comment</key>
      <dict>
        <key>name</key>
        <string>comment.tis</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#doc-comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#block-comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#line-comment</string>
          </dict>
        </array>
      </dict>
      <key>comment-block-doc</key>
      <dict>
        <key>name</key>
        <string>comment.block.documentation.tis</string>
        <key>begin</key>
        <string>/\*\*(?!/)</string>
        <key>end</key>
        <string>\*/</string>
      </dict>
      <key>block-comment</key>
      <dict>
        <key>name</key>
        <string>comment.block.tis</string>
        <key>begin</key>
        <string>/\*</string>
        <key>end</key>
        <string>\*/</string>
      </dict>
      <key>line-comment</key>
      <dict>
        <key>name</key>
        <string>comment.line.tis</string>
        <key>begin</key>
        <string>//</string>
        <key>end</key>
        <string>$</string>
      </dict>
      <key>literal</key>
      <dict>
        <key>name</key>
        <string>literal.tis</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#string-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#regex</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#numeric-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#boolean-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#null-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#undefined-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#tuple-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#array-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#this-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#self-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#global-vars</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#symbol-literal</string>
          </dict>
        </array>
      </dict>
      <key>string-literal</key>
      <dict>
        <key>name</key>
        <string>string.tis</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#qstring-double</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#qstring-back-tick</string>
          </dict>
        </array>
      </dict>
      <key>qstring-double</key>
      <dict>
        <key>name</key>
        <string>string.double.tis</string>
        <key>begin</key>
        <string>"</string>
        <key>end</key>
        <string>"|(?:[^\\\n]$)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#string-character-escape</string>
          </dict>
        </array>
      </dict>
      <key>qstring-back-tick</key>
      <dict>
        <key>name</key>
        <string>string.back-tick.tis</string>
        <key>begin</key>
        <string>`</string>
        <key>end</key>
        <string>`|(?:[^\\\n]$)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#string-character-escape</string>
          </dict>
        </array>
      </dict>
      <key>string-character-escape</key>
      <dict>
        <key>match</key>
        <string>\\(x[0-9a-fA-F]{1,2}|[btnfr"\\`]|[0-7]{1,3}|u[0-9a-fA-F]{4}|$)</string>
        <key>name</key>
        <string>constant.character.escape</string>
      </dict>
      <key>regex</key>
      <dict>
        <key>name</key>
        <string>string.regex.tis</string>
        <key>begin</key>
        <string>(?&lt;=[=(:,\[]|^|return|&amp;&amp;|\|\||!)\s*(\/)(?![\/*+{}?])</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>entity.name.class.rx</string>
          </dict>
        </dict>
        <key>end</key>
        <string>$|(\/i?g?)</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>entity.name.class.rx</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\\.</string>
            <key>name</key>
            <string>constant.character.escape.tis</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\[(\\\]|[^\]])*\]</string>
            <key>name</key>
            <string>constant.character.class.tis</string>
          </dict>
        </array>
      </dict>
      <key>numeric-literal</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#float-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#integer-literal</string>
          </dict>
        </array>
        <key>name</key>
        <string>constant.numeric.tis</string>
      </dict>
      <key>integer-literal</key>
      <dict>
        <key>match</key>
        <string>'.'|(-?\b(0[xX][0-9a-fA-F]+|-?([0-9]+))\b)</string>
        <key>name</key>
        <string>constant.numeric.integer.tis</string>
      </dict>
      <key>float-literal</key>
      <dict>
        <key>match</key>
        <string>-?(([0-9]*\.[0-9]+[eE]-?[0-9]+)|([0-9]+[eE]-?[0-9]+)|([0-9]*\.[0-9]+))</string>
        <key>name</key>
        <string>constant.numeric.float.tis</string>
      </dict>
      <key>boolean-literal</key>
      <dict>
        <key>match</key>
        <string>\b(false|true)\b</string>
        <key>name</key>
        <string>constant.language.boolean.tis</string>
      </dict>
      <key>null-literal</key>
      <dict>
        <key>match</key>
        <string>\b(null)\b</string>
        <key>name</key>
        <string>constant.language.null.tis</string>
      </dict>
      <key>undefined-literal</key>
      <dict>
        <key>match</key>
        <string>\b(undefined)\b</string>
        <key>name</key>
        <string>constant.language.tis</string>
      </dict>
      <key>tuple-literal</key>
      <dict>
        <key>begin</key>
        <string>(\[)([\w$@-]+):</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>meta.brace.square.tis</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>constant.language.symbol.tis</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\]</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>meta.brace.square.tis</string>
          </dict>
        </dict>
        <key>name</key>
        <string>meta.tuple.literal.tis</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>array-literal</key>
      <dict>
        <key>begin</key>
        <string>\[</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>meta.brace.square.tis</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\]</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>meta.brace.square.tis</string>
          </dict>
        </dict>
        <key>name</key>
        <string>meta.array.literal.tis</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>this-literal</key>
      <dict>
        <key>match</key>
        <string>\b(this)\b</string>
        <key>name</key>
        <string>constant.language.this.tis</string>
      </dict>
      <key>self-literal</key>
      <dict>
        <key>match</key>
        <string>\b(self)\b</string>
        <key>name</key>
        <string>constant.language.self.tis</string>
      </dict>
      <key>global-vars</key>
      <dict>
        <key>match</key>
        <string>\b(view|std(in|out|err))\b</string>
        <key>name</key>
        <string>constant.language.other.tis</string>
      </dict>
      <key>symbol-literal</key>
      <dict>
        <key>match</key>
        <string>#[\w$@-]+</string>
        <key>name</key>
        <string>constant.language.symbol.tis</string>
      </dict>
      <key>block</key>
      <dict>
        <key>begin</key>
        <string>(\{)(:\w+)?</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>meta.brace.square.tis</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.class.tis</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\}</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>meta.brace.square.tis</string>
          </dict>
        </dict>
        <key>name</key>
        <string>meta.block.tis</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#simple-keywords</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#object-member</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>object-member</key>
      <dict>
        <key>begin</key>
        <string>[a-zA-Z_$][\w$]*\s*:</string>
        <key>end</key>
        <string>(?=,|\})</string>
        <key>name</key>
        <string>meta.object.member.tis</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>var-decl</key>
      <dict>
        <key>begin</key>
        <string>\s*\b(var|const)\b</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.tis</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=$|;)</string>
        <key>name</key>
        <string>meta.var.expr.tis</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#var-single-variable</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
        </array>
      </dict>
      <key>var-single-variable</key>
      <dict>
        <key>begin</key>
        <string>\b([a-zA-Z_$][\w$]*)\s*(=?)</string>
        <key>beginCaptures</key>
        <dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>variable.operator.tis</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=$|[;,])</string>
        <key>name</key>
        <string>meta.var-single-variable.expr.tis</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#string</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>paren-expression</key>
      <dict>
        <key>begin</key>
        <string>\(</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>meta.brace.paren.tis</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\)</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>meta.brace.paren.tis</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>var-point</key>
      <dict>
        <key>match</key>
        <string>(?&lt;=^|\s)([a-zA-Z_]\w*)\.</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>variable.tis</string>
          </dict>
        </dict>
      </dict>
      <key>var-simple-assign</key>
      <dict>
        <key>match</key>
        <string>(?&lt;=^|\s)([a-zA-Z_]\w*)\s*(?=[=&gt;!&lt;+-\/*%|&amp;])</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>variable.tis</string>
          </dict>
        </dict>
      </dict>
      <key>var-simple-left-assign</key>
      <dict>
        <key>match</key>
        <string>(?&lt;=[=&lt;&gt;+-\/*%|&amp;])\s*([a-zA-Z_]\w*)</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>variable.tis</string>
          </dict>
        </dict>
      </dict>
      <key>var-simple-return</key>
      <dict>
        <key>match</key>
        <string>(?&lt;=return)\s*([a-zA-Z_]\w*)</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>variable.tis</string>
          </dict>
        </dict>
      </dict>
      <key>stringize-selector</key>
      <dict>
        <key>begin</key>
        <string>(\.\$)?\$(is|p)?\(</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>string.stringize.tis</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\)</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>string.stringize.tis</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\{\s*\w+\s*\}</string>
            <key>name</key>
            <string>variable.tis</string>
          </dict>
          <dict>
            <key>include</key>
            <string>source.sciter.selectors</string>
          </dict>
        </array>
      </dict>
      <key>declaration</key>
      <dict>
        <key>name</key>
        <string>meta.declaration.tis</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#function-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#decorator</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(class)\s+([a-zA-Z]\w+)(?:\s*:\s*([a-zA-Z]\w+))?\s*</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.class.tis</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.class.tis</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>entity.name.class.tis</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>function-declaration</key>
      <dict>
        <key>begin</key>
        <string>\b(?:(async)\s+)?(function\b)(?:\s+(?:(self).)?([a-zA-Z_$@][\w$]*))?\s*</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.tis</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>storage.type.function.tis</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>constant.language.self.tis</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>entity.name.function.tis</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=;|\})|(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#function-type-parameters</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#function-overload-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#decl-block</string>
          </dict>
        </array>
      </dict>
      <key>function-overload-declaration</key>
      <dict>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.type.function.tis</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.function.tis</string>
          </dict>
        </dict>
        <key>match</key>
        <string>\b(function\b)(?:\s+([a-zA-Z_$][\w$]*))?\s*</string>
      </dict>
      <key>decl-block</key>
      <dict>
        <key>begin</key>
        <string>\{</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>meta.brace.curly.tis</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\}</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>meta.brace.curly.tis</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>function-type-parameters</key>
      <dict>
        <key>begin</key>
        <string>\(</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>meta.brace.round.tis</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\)</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>meta.brace.round.tis</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#parameter-name</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#variable-initializer</string>
          </dict>
        </array>
      </dict>
      <key>parameter-name</key>
      <dict>
        <key>match</key>
        <string>([a-zA-Z_$][\w$]*)(\.\.)?</string>
        <key>name</key>
        <string>parameter.name.tis</string>
        <key>captures</key>
        <dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>keyword.others.tis</string>
          </dict>
        </dict>
      </dict>
      <key>variable-initializer</key>
      <dict>
        <key>begin</key>
        <string>(=)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>variable.operator.tis</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=$|[,);=])</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>decorator</key>
      <dict>
        <key>match</key>
        <string>@[a-zA-Z_$][\w$]*</string>
        <key>name</key>
        <string>entity.name.function.decorator.tis</string>
      </dict>
      <key>statements</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#break</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#for</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#control-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#labeled-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#other-keywords</string>
          </dict>
        </array>
      </dict>
      <key>control-statement</key>
      <dict>
        <key>match</key>
        <string>(?&lt;!\.)\b(if|else|switch|continue)\b</string>
        <key>name</key>
        <string>keyword.control.tis</string>
      </dict>
      <key>for</key>
      <dict>
        <key>begin</key>
        <string>(?&lt;!\.)\b(for)(?:\s*:\s*([a-zA-Z_$][\w$]*))?\b\s*\(</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.tis</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>markup.italic</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\s*\bvar\b\s*</string>
            <key>name</key>
            <string>storage.type.tis</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\s*\bin\b\s*</string>
            <key>name</key>
            <string>keyword.control.tis</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>labeled-statement</key>
      <dict>
        <key>match</key>
        <string>(?&lt;!\.)\b(while|do|for)(?:\s*:\s*([a-zA-Z_$][\w$]*))?\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.tis</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>markup.italic</string>
          </dict>
        </dict>
      </dict>
      <key>break</key>
      <dict>
        <key>match</key>
        <string>(?&lt;!\.)\b(break)(?:\s+([a-zA-Z_$][\w$]*))?\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.break.tis</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>markup.italic</string>
          </dict>
        </dict>
      </dict>
      <key>other-keywords</key>
      <dict>
        <key>match</key>
        <string>(?&lt;!\.)\b(return|throw|try|catch|finally|with|await|yield|include|delete|assert|get|set|property|typeof|instanceof|new|namespace)\b</string>
        <key>name</key>
        <string>keyword.other.tis</string>
      </dict>
      <key>known-types</key>
      <dict>
        <key>match</key>
        <string>(?&lt;!\.)\b(JSON|Integer|Float|String|Symbol|Array|Object|Function|Length|Angle|Duration|Color|Date|Bytes|Typle|Stream|View|Element|Event|Image|DataSocket|WebSocket|Tokenizer|Math|System|VM|Storage|Index|XMLScanner)\b</string>
        <key>name</key>
        <string>entity.name.class.internal.tis</string>
      </dict>
      <key>known-functions</key>
      <dict>
        <key>match</key>
        <string>(?&lt;!\.)\b(eval|parseData|emit|load(bc)?|compile|store|fetch|hash|membersOf|rand|gc|crackUrl|symbol|color|em|pr|px|cm|pt|dip|flex|rad|deg)(?=\()</string>
        <key>name</key>
        <string>entity.name.function.internal.tis</string>
      </dict>
      <key>known-methods</key>
      <dict>
        <key>match</key>
        <string>(?&lt;=\.)\b(stringify|toString|toLocaleString|valueOf|clone|extend|exists|remove|call|show|eval|propertyAt|seal|isSealed|freeze|isFrozen|addObserver|removeObserver|referenceOf|push|shift|pop|unshift|concat|join|reverse|slice|splice|sort|indexOf|lastIndexOf|removeByValue|map|reduce(Right)?|filter|toInteger|toFloat|toNumber|toHtmlString|toUrlString|substring|substr|charAt|charCodeAt|lexicalCompare|match|replace|search|split|fromCharCode|toLowerCase|toUpperCase|trim|urlEscape|urlUnescape|htmlEscape|htmlUnescape|scanf|apply|utc|local|toUTCString|toISOString|parse|UTC|setTime|monthName|dayOfWeekName|isDaylight|timeZoneOffset|timeZoneName|min|max|isNaN|isFinite|morph|limit|rgba|hsv|hsl|tint|toHSV|toHSL|degrees|radians|abs|sin|cos|tan|atan|asin|acos|sqrt|ceil|floor|round|exp|log|log2|log10|pow|random|openFile|openSocket|openString|openPipe|close|print|println|$n|printf|putc|getc|readln|send|post|fromString|md5|crc32|save|scanFiles|home|path|open|commit|createIndex|add|select|token)(?=\()</string>
        <key>name</key>
        <string>entity.name.method.internal.tis</string>
      </dict>
      <key>known-properties</key>
      <dict>
        <key>match</key>
        <string>(?&lt;=\.)\b(prototype|className|length|first|last|name|fullName|optionals|(UTC)?month|(UTC)?year|(UTC)?hour|(UTC)?minute|(UTC)?(milli)?second|(UTC)?day(OfWeek)?|firstDayOfWeek|MIN|MAX|input|source|index|r|g|b|a|opacity|units|degrees|radians|E|LN2|LN10|LOG2E|LOG10E|PI|SQRT1_2|SQRT2|is(Input|Output|Pipe)|proxy|pending|encoding|type|IS_(READONLY|DIR|HIDDEN)|((MOBILE|DESKTOP)_)?OS|PLATFORM|language|country|ticks|root|autocommit|asc|ERROR|EOF|(EMPTY_)?HEAD(_END)?|TAIL|ATTR|TEXT|CDATA|PI|DOCTYPE|value|attribute|tag)\b</string>
        <key>name</key>
        <string>entity.name.method.internal.tis</string>
      </dict>
      <key>ops</key>
      <dict>
        <key>match</key>
        <string>(\|\||&amp;&amp;|\^=|={1,3}|(\+|-|\*|\/|%|&lt;{1,3}|&gt;{1,3}|&amp;|\|)=?)</string>
        <key>name</key>
        <string>variable.operator.tis</string>
      </dict>
    </dict>
  </dict>
</plist>